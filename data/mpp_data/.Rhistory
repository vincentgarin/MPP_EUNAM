ped <- data.frame(id,P1,P2)
makeAinv(ped)
Ai <- read.table("Ainv.txt")
nInd <- nrow(ped)
Ainv <- matrix(0,nrow = nInd,ncol = nInd)
Ainv[as.matrix(Ai[,1:2])] <- Ai[,3]
dd <- diag(Ainv)
Ainv <- Ainv + t(Ainv)
diag(Ainv) <- dd
Ainv
# Z matrix corresponding to the genetic effect. Some animal are used
# to compute the genetic effec but do not have phenotypic values
# so we need to add column of 0 for the 6 first animals
Z1 <- cbind(matrix(0, 10, 6), diag(10))
# modification of the previous example: remove the common maternal effect
# model: y = Xb + Z1G + e; with b: year and sex effect, G: genetic effect
# 1. year as fixed
LHS <- rbind(cbind(t(X) %*% X, t(X) %*% Z1),
cbind(t(Z1) %*% X, t(Z1) %*% Z1 + Ainv*(S.e/S.g)))
RHS <- rbind(t(X) %*% y, t(Z1) %*% y)
C <- solve(LHS)
BU <- C %*% RHS
BU
# year effect for later
u <- sum(BU[1:3])/3
year.eff.fix <- BU[1:3] - u
year.eff.fix
# 2. year as random small effect
X <- cbind(rep(1, 10), Xs[, -1]) # overall mean and sex effect
Z2 <- Xy
S.e <- 6500
S.g <- 2000
S.y <- 500
I <- diag(3)
LHS <- rbind(
cbind(t(X) %*% X, t(X) %*% Z1, t(X) %*% Z2),
cbind(t(Z1) %*% X , t(Z1) %*% Z1 + Ainv * (S.e/S.g), t(Z1) %*% Z2),
cbind(t(Z2) %*% X, t(Z2) %*% Z1, t(Z2) %*% Z2 + I * (S.e/S.y) ))
RHS <- rbind(t(X) %*% y,
t(Z1) %*% y,
t(Z2) %*% y)
C <- solve(LHS)
BU <- C %*% RHS
BU
# year effect
year.eff.rd1 <- BU[19:21]
# 3. year as random large effect
S.e <- 6500
S.g <- 2000
S.y <- 100000
I <- diag(3)
LHS <- rbind(
cbind(t(X) %*% X, t(X) %*% Z1, t(X) %*% Z2),
cbind(t(Z1) %*% X , t(Z1) %*% Z1 + Ainv * (S.e/S.g), t(Z1) %*% Z2),
cbind(t(Z2) %*% X, t(Z2) %*% Z1, t(Z2) %*% Z2 + I * (S.e/S.y) ))
RHS <- rbind(t(X) %*% y,
t(Z1) %*% y,
t(Z2) %*% y)
C <- solve(LHS)
BU <- C %*% RHS
BU
# year effect
year.eff.rd2 <- BU[19:21]
# comparison
cbind(year.eff.fix, year.eff.rd1, year.eff.rd2)
(2*576) + 576
install.packages("//wurnet.nl/Homes/garin002/AppData/FolderRedirection/Desktop/digger.zip", repos = NULL, type = "win.binary")
install.packages("//wurnet.nl/Homes/garin002/AppData/FolderRedirection/Desktop/digger/DiGGer_0.2-31.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("//wurnet.nl/Homes/garin002/AppData/FolderRedirection/Desktop/digger/DiGGer_0.2-31.zip", repos = NULL, type = "win.binary")
library(DiGGer)
install.packages("R.oo")
library(DiGGer)
dp192<-des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1,2),c(576,576)),
tgrp=rep(c(1,2),c(576,576)),
ribs=c(2,2,2),
cibs=c(100,50,25))
# design for 184 entries [23x10] with block sequence
# [23x5], [6x5] and [6x1].
# The first 179 treatments are of interest - Group 1
prep184 <- des.prep00(nt=184,
nrd=23,
ncd=10,
trep=rep(c(2,1,5),c(26,153,5)),
tgrp=rep(c(1,2),c(179,5)),
ribs=c(23,6,6),
cibs=c(5,5,1))
prep184 <- run(prep184)
prep184
16*108
rep(c(1, 2), c(576, 576))
rep(c(2,1,5),c(26,153,5))
sum(rep(c(2,1,5),c(26,153,5)))
sum(rep(c(1, 2), c(576, 576)))
rep(c(1,2),c(179,5)
)
dp192 <- des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1, 2), c(576, 576)),
tgrp=rep(c(1, 2),c(576,576)),
ribs=c(2, 2, 2),
cibs=c(100, 50, 25))
dp192 <- des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1, 2), c(576, 576)),
tgrp=rep(c(1, 2),c(576,576)),
ribs=c(2, 2, 2),
cibs=c(100, 50, 25), maxint = 4000)
dp192 <- des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1, 2), c(576, 576)),
tgrp=rep(c(1, 2),c(576,576)),
ribs=c(2, 2, 2),
cibs=c(100, 50, 25))
16*108
576 +(2*576)
prep184 <- des.prep00(nt=184,
nrd=23,
ncd=10,
trep=rep(c(2,1,5),c(26,153,5)),
tgrp=rep(c(1,2),c(179,5)),
ribs=c(23,6,6),
cibs=c(5,5,1))
prep184 <- run(prep184)
prep184
26*6*6*5*5
8*100*50*25
8*100*50*25
8*10*50*25
8*10*5*25
dp192 <- des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1, 2), c(576, 576)),
tgrp=rep(c(1, 2), c(576, 576)),
ribs=c(2, 2, 2),
cibs=c(10, 5, 25))
232*5
29*2
# remove ribs and cibs
dp192 <- des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1, 2), c(576, 576)),
tgrp=rep(c(1, 2), c(576, 576)))
dp192 <- des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1, 2), c(576, 576)),
tgrp=rep(c(1, 2), c(576, 576)),
ribs=c(2, 2, 2))
dp192<-des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1,2),c(576,576)),
tgrp=rep(c(1,2),c(576,576)),
ribs=c(2,2),
cibs=c(50,25))
dp192<-des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1,2),c(576,576)),
tgrp=rep(c(1,2),c(576,576)),
ribs=c(2, 2, 2),
cibs=c(100, 50, 25))
dp192<-des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1,2),c(576,576)),
tgrp=rep(c(1,2),c(576,576)),
ribs=c(16, 16, 16),
cibs=c(108, 108, 108))
23*5
dp192<-des.prep00(nt=1152,
nrd=16,
ncd=108,
trep=rep(c(1,2),c(576,576)),
tgrp=rep(c(1,2),c(576,576)),
ribs=c(16, 16, 16),
cibs=c(10, 5, 2))
8*27
4*27
108+36+4
data <- read.table("E:/PhD/Probability & statistics/Mixed models/data/Animal_illustration.txt")
colnames(data) <- c("calf","Sire","Dam","Year","Sex","weight")
data
################################################################################
################################################################################
#
# The effect of genetic distance between parents in MPP QTL analysis
#
# Vincent Garin, Marcos Malosetti, Fred van Eeuwijk, 2016
#
################################################################################
################################################################################
# Library
# you can find in the ~MPP_EUNAM/software a tar.gz version of the package
# mppRDraft build for this research
library(mppR)
library(asreml)
#####################
#  Raw data sources #
#####################
# the raw data used come from the following sources:
# genotype matrix : http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE50558
# phenotype (trait) data : http://www.genetics.org/content/198/1/3/suppl/DC1
# map : http://maizegdb.org/cgi-bin/displayrefrecord.cgi?id=9024747
# You can find the necessary data in the folowing folders of the repository
# ~MPP_EUNAM/data/geno
# ~MPP_EUNAM/data/pheno
# ~MPP_EUNAM/data/map
# 1.1 load data
##############
# SPECIFY YOUR PATH HERE (the location of ~/MPP_EUNAM)
path <- "F:/EU_NAM/EU_NAM_DENT/MPP_EUNAM/"
setwd(path)
pheno <- read.csv("./data/pheno/PhenotypicDataDent.csv")
# change the column names
col.names <- colnames(pheno)
col.names[c(2,7)] <- c("Fam","Block")
colnames(pheno) <- col.names
rm(col.names)
par_names <- c("B73","D06", "D09", "EC169", "F252", "F353", "F618", "F98902",
"Mo17", "UH250", "UH304","W117")
# change MO17 for Mo17
pheno$Genotype <- as.character(pheno$Genotype)
pheno$Fam <- as.character(pheno$Fam)
pheno$Pedigree <- as.character(pheno$Pedigree)
pheno[which(pheno[,1]=="MO17"),1:3] <- "Mo17"
pheno$Genotype <- as.factor(pheno$Genotype)
pheno$Fam <- as.factor(pheno$Fam)
pheno$Pedigree <- as.factor(pheno$Pedigree)
# 1.2 Put plot information as missing for DMC and DMY where number of plant
# is bellow 0.7 the median score per location
#############################################
# compute the median number of plant per location
loc.id <- levels(pheno$LOC)
median.NBPL <- c()
for(i in 1:4){
median.i <- median(pheno$NBPL[pheno$LOC==loc.id[i]])
median.NBPL <- c(median.NBPL,median.i)
}
# determine per location which plot contain 70% less plant than the number of
# data
missing.plot <- c()
for(i in 1:4){
missing.plot.i <- pheno$NBPL[pheno$LOC==loc.id[i]]<(median.NBPL[i]*0.7)
missing.plot <- c(missing.plot, missing.plot.i)
}
# Put missins values for DMY and DMC
pheno[missing.plot, 9:10] <- NA
# 1.3 Perform the Grubb test to detect outlying plot
###################################################
# Grubb test applied on the residual of a mixed model. If the residual of the
# mixed model contained an outlying observation (Grubb test pval< 0.05), the
# plot value for this specific trait with the largest residual is put as missing.
# This procedure is applied iteratively until no extreme value is detected.
# The test is done for the 5 traits.
# iteration on all the five traits
trait.id <- c("DMY", "DMC", "PH", "DtTAS", "DtSILK")
pos.id <- c(9, 10, 11, 12, 13)
# iteration on all the five traits
trait.id <- c("DMY", "DMC", "PH", "DtTAS", "DtSILK")
pos.id <- c(9, 10, 11, 12, 13)
for (i in 1:5){
fix_formula <- paste(trait.id[i],"~1",sep="")
# set initial value for p_val
p_val <- 0.01
count <- 0
while(p_val < 0.05){
# compute the mixed model
model <- asreml(fixed = as.formula(fix_formula), random = ~ Genotype + LOC +
Genotype:LOC + LOC:Rep +  LOC:Rep:Block,
rcov= ~ idv(units), data = pheno, trace = FALSE)
# compute the residuals
res <- model$residuals
# do the Grubbs test on the residuals
test <- grubbs.test(res, type = 10, two.sided = TRUE)
# get the p-val of the test
p_val <- test$p.value
# test if p_val is lower than 0.05 (presence of an outlier)
if(p_val < 0.05){
# remove the outlying value from the data
# check if there are missing values within the residuals
if(sum(is.na(res))>0){
pheno[which(abs(res) == max(abs(res[-which(is.na(res))]))),
pos.id[i]] <- NA
count <- count + 1
} else {
pheno[which(abs(res) == max(abs(res))), pos.id[i]] <- NA
count <- count + 1
}
}
}
}
library(outliers)
for (i in 1:5){
fix_formula <- paste(trait.id[i],"~1",sep="")
# set initial value for p_val
p_val <- 0.01
count <- 0
while(p_val < 0.05){
# compute the mixed model
model <- asreml(fixed = as.formula(fix_formula), random = ~ Genotype + LOC +
Genotype:LOC + LOC:Rep +  LOC:Rep:Block,
rcov= ~ idv(units), data = pheno, trace = FALSE)
# compute the residuals
res <- model$residuals
# do the Grubbs test on the residuals
test <- grubbs.test(res, type = 10, two.sided = TRUE)
# get the p-val of the test
p_val <- test$p.value
# test if p_val is lower than 0.05 (presence of an outlier)
if(p_val < 0.05){
# remove the outlying value from the data
# check if there are missing values within the residuals
if(sum(is.na(res))>0){
pheno[which(abs(res) == max(abs(res[-which(is.na(res))]))),
pos.id[i]] <- NA
count <- count + 1
} else {
pheno[which(abs(res) == max(abs(res))), pos.id[i]] <- NA
count <- count + 1
}
}
}
}
# 1.4 subset the data that were used in Lehermeier et al. research
#################################################################
# Several data have not been used for the final analysis. These lines comprise
# the cross CFD08. Other lines that were not genotyped were also excluded.
# lines with a call rate <0.9 were also removed. Finally lines were discarded
# due to problem due to the map construction. These information have been
# provided by Christina Lehermeier.
# To separate the line that will be further used and to the other, I use
# a list transmitted by Christina Lehermeier which correspond to the list
# of lines used in Lehermeier et al. (2014)
lines_used <- read.csv("./data/pheno/List_lines_Dent_Lehermeier.csv")
# assign specific family indicator for the non used lines
ind <- !(pheno[,1] %in% lines_used[,1])
pheno$Fam <- as.character(pheno$Fam)
pheno$Fam[ind] <- "Extra"
pheno$Fam <- as.factor(pheno$Fam)
# save data
write.csv(pheno,"./data/pheno/pheno_red.csv")
# 1.5 Adjusted means computation
#################################
# SPECIFY YOUR PATH HERE (the location of ~/MPP_EUNAM)
path <- "F:/EU_NAM/EU_NAM_DENT/MPP_EUNAM/"
setwd(path)
View(pheno)
pheno <- read.csv("./data/pheno/pheno_red.csv")
View(pheno)
pheno <- read.csv("./data/pheno/pheno_red.csv", row.names = 1)
View(pheno)
lines_used <- read.csv("./data/pheno/List_lines_Dent_Lehermeier.csv")
View(lines_used)
# suppress the factor levels with 0 occurences
pheno$Genotype <- as.factor(as.character(pheno$Genotype))
pheno$Fam <- as.factor(as.character(pheno$Fam))
# order data by family
pheno <- pheno[order(pheno$Fam), ]
par_names <- c("B73", "D06", "D09", "EC169", "F252", "F353", "F618", "F98902",
"Mo17", "UH250", "UH304", "W117")
#############################
# table and figures article #
#############################
# Table 1
#########
library(mppRDraft)
library(xtable)
path <- "~/MPP_EUNAM"
setwd(path)
# Genotype
geno.par <- read.csv("./data/geno/geno_panzea_par.csv", row.names = 1)
# SM coefficient distance between the central parent (F353)
kin.mat.par <- kinship.matrix(mk.mat = geno.par, method = "SM")
dist.cent.par <- kin.mat.par[, 6]
dist.cent.par <- dist.cent.par[ -6]
# relate information distance between the two parents to the cross
# information
crosses <- c("CFD02","CFD03","CFD04","CFD05","CFD06","CFD07",
"CFD09","CFD10","CFD11","CFD12")
# sample sizes
pheno.short <- read.csv("./data/pheno/pheno.short.sorted.csv", row.names = 1)
pheno.hetero <- read.csv("./data/pheno/pheno.hetero.sorted.csv", row.names = 1)
pheno.long <- read.csv("./data/pheno/pheno.long.sorted.csv", row.names = 1)
short.cr <- substr(rownames(pheno.short), 1, 5)
hetero.cr <- substr(rownames(pheno.hetero), 1, 5)
long.cr <- substr(rownames(pheno.long), 1, 5)
short.cr.sz <- table(short.cr)
hetero.cr.sz <- table(hetero.cr)
long.cr.sz <- table(long.cr)
N.sh <- rep(0, 10)
N.sh[crosses %in% names(short.cr.sz)] <- short.cr.sz
N.het <- rep(0, 10)
N.het[crosses %in% names(hetero.cr.sz)] <- hetero.cr.sz
N.lg <- rep(0, 10)
N.lg[crosses %in% names(long.cr.sz)] <- long.cr.sz
# genetic variance components
library(asreml)
pheno <- read.csv("./data/pheno/pheno_red.csv", row.names = 1)
lines_used <- read.csv("./data/pheno/List_lines_Dent_Lehermeier.csv")
# suppress the factor levels with 0 occurences
pheno$Genotype <- as.factor(as.character(pheno$Genotype))
pheno$Fam <- as.factor(as.character(pheno$Fam))
# order data by family
pheno <- pheno[order(pheno$Fam), ]
par_names <- c("B73","D06", "D09", "EC169", "F252", "F353", "F618", "F98902",
"Mo17", "UH250", "UH304","W117")
# DMY
model <- asreml(fixed = DMY~1, random= ~ Fam + at(Fam):Genotype +
at(Fam):LOC:Genotype + LOC:Rep + LOC:Rep:Block,
rcov=~at(Fam):units, data = pheno,
na.method.X = "omit", na.method.Y="omit")
var.DMY <- summary(model)$varcomp
View(var.DMY)
gen.var.DMY <- var.DMY[c(2:11), 1]
colnames(var.DMY) <- c("sigma.g", "std.err", "sigma.ge", "std.err",
"heritability")
View(var.DMY)
# PH
model <- asreml(fixed = PH~1, random = ~ Fam + at(Fam):Genotype +
at(Fam):LOC:Genotype + LOC:Rep + LOC:Rep:Block,
rcov=~at(Fam):units, data = pheno,
na.method.X = "omit", na.method.Y = "omit")
var.PH <- summary(model)$varcomp
gen.var.PH <- var.PH[c(2:11), 1]
# parent per cross
parent1 <- as.character(rep("F353",10))
parent2 <- c("B73","D06","D09","EC169","F252","F618","Mo17",
"UH250","UH304","W117")
par.per.cross <- cbind(crosses, parent1, parent2)
dist.cent.par <- data.frame(par.per.cross[,1], par.per.cross[,3],
round(dist.cent.par, 3), gen.var.DMY, gen.var.PH,
N.sh, N.het, N.lg)
colnames(dist.cent.par) <- c("cross","parent 2","SM", "var.g.DMY", "var.g.PH",
"short","het.","long")
dist.cent.par
Adj_means <- matrix(0, length(lines_used), 5)
View(Adj_means)
Adj_means <- matrix(0, dim(lines_used)[1], 5)
View(Adj_means)
trait.id <- c("DMY", "DMC", "PH", "DtTAS", "DtSILK")
Adj_means <- matrix(0, dim(lines_used)[1], 5)
i=1
fix_formula <- paste(trait.id[i], "~ 1 + Genotype", sep = "")
fix_formula
fix_formula <- paste(trait.id[i], " ~ 1 + Genotype", sep = "")
fix_formula
model <- asreml(fixed = as.formula(fix_formula),
random = ~  LOC:Genotype + LOC:Rep + LOC:Rep:Block,
rcov = ~ idv(units), data = pheno,
na.method.X = "omit", na.method.Y="omit")
pred <- predict(model, classify = "Genotype")
pred.DMY <- pred$predictions$pvals$predicted.value
pred <- predict(model, classify = "Genotype")
pred$predictions$pvals$Genotype %in% lines_used[, 1]
index <- pred$predictions$pvals$Genotype %in% lines_used[, 1]
pred$predictions$pvals$predicted.value[index]
trait.id <- c("DMY", "DMC", "PH", "DtTAS", "DtSILK")
Adj_means <- matrix(0, dim(lines_used)[1], 5)
########### there.
for (i in 1:5){
fix_formula <- paste(trait.id[i], " ~ 1 + Genotype", sep = "")
model <- asreml(fixed = as.formula(fix_formula),
random = ~  LOC:Genotype + LOC:Rep + LOC:Rep:Block,
rcov = ~ idv(units), data = pheno,
na.method.X = "omit", na.method.Y="omit")
pred <- predict(model, classify = "Genotype")
index <- pred$predictions$pvals$Genotype %in% lines_used[, 1]
Adj_means[, i] <- pred$predictions$pvals$predicted.value[index]
}
View(Adj_means)
colnames(Adj_means) <- c("DMY","DMC","PH","DtTAS","DtSILK")
View(Adj_means)
rownames(Adj_means) <- lines_used[, 1]
View(Adj_means)
# save the adjusted means
write.csv(Adj_means,"./data/pheno/Adj_means.csv")
# remove all useless variables
variable <- ls()
variable <- variable[-which(variable == "path")]
rm(list=variable)
rm(variable)
setwd("F:/EU_NAM/EU_NAM_DENT/MPP_EUNAM/data/mpp_data")
data.short <-
#############################################
# 4. Determine the three subset populations #
#############################################
# SPECIFY YOUR PATH HERE (the location of ~/MPP_EUNAM)
path <- "F:/EU_NAM/EU_NAM_DENT/MPP_EUNAM/"
setwd("F:/EU_NAM/EU_NAM_DENT/MPP_EUNAM/data/mpp_data")
data.short <- readRDS("data.short.ABH.rds")
data.short$trait
data.short$ped.mat
data.short <- readRDS("data.short.ABH.rds")
data.het <- readRDS("data.hetero.ABH.rds")
data.long <- readRDS("data.long.ABH.rds")
geno.sel.list <- data.frame(data.short$ped.mat$geno.ind,
data.het$ped.mat$geno.ind,
data.long$ped.mat$geno.ind)
View(geno.sel.list)
colnames(geno.sel.list) <- c("short", "het", "long")
View(geno.sel.list)
View(geno.sel.list)
write.table(geno.sel.list, "F:/EU_NAM/EU_NAM_DENT/MPP_EUNAM/data/geno/geno_sel_list.txt")
